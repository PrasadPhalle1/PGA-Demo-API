{
  "stats": {
    "suites": 5,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2022-11-02T13:26:33.942Z",
    "end": "2022-11-02T13:26:34.007Z",
    "duration": 65,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4f41e364-3cc3-4c98-958a-341974d5f053",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "86518534-c630-4d44-9775-55bdb11a42eb",
          "title": "POST",
          "fullFile": "D:\\PGADemoAPI\\test\\Test1.js",
          "file": "\\test\\Test1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "/users",
              "fullTitle": "POST /users",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data={\n    email:`test-${Math.floor(Math.random()*9999)}@mail.com`,\n    name :'Test1',\n    gender :'female',\n    status : 'active',\n};\nrequest.post('users')\n.set('Authorization',`Bearer ${Token}`)\n.send(data)\n.then((res)=>{\n    console.log(res.body);\n    expect(res.body.data.email).to.eq(data.email);\n    expect(res.body.data.name).to.eq(data.name);\n    data.gender='male';\n    expect(res.body.data).to.deep.include(data)\n    userId=res.body.data.id\n})",
              "err": {},
              "uuid": "b4557a8d-4bd1-4b6d-932c-6708fa234f4c",
              "parentUUID": "86518534-c630-4d44-9775-55bdb11a42eb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b4557a8d-4bd1-4b6d-932c-6708fa234f4c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 27,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e82ccaec-5ab0-4cb0-8867-d30de76f2d03",
          "title": "GET",
          "fullFile": "D:\\PGADemoAPI\\test\\Test1.js",
          "file": "\\test\\Test1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "/user",
              "fullTitle": "GET /user",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.get('users?access-token=${Token}').end((err,res)=>{\n    console.log('Error found is: ',err);\n    console.log(res.body);\n    expect(res.body.data).to.not.be.empty;\n// done();\n})",
              "err": {},
              "uuid": "950ca2aa-8a3a-410b-99e4-caad959f637f",
              "parentUUID": "e82ccaec-5ab0-4cb0-8867-d30de76f2d03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "/user/:id",
              "fullTitle": "GET /user/:id",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.get(`users/${userId}`).end((err,res)=>{\nconsole.log('Error found is: ',err);\nconsole.log(res.body);\n        });",
              "err": {},
              "uuid": "18e84382-60ec-44f5-a838-a36dd115361e",
              "parentUUID": "e82ccaec-5ab0-4cb0-8867-d30de76f2d03",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "/users/id",
              "fullTitle": "GET /users/id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.get('users?access-token= ${Token}&page=5&status=active&gender=female').end((err,res)=>{\n    console.log('Error found is: ',err);\n    console.log(res.body);\n    res.body.data.forEach(data => {\n        expect(data.status).to.eq('active');\n        expect(data.gender).to.eq('female');\n    });\n    // expect(res.body.data.id).to.be.eql(1);\n});",
              "err": {},
              "uuid": "d8965401-21ea-4d8c-8480-cac8ed522004",
              "parentUUID": "e82ccaec-5ab0-4cb0-8867-d30de76f2d03",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "950ca2aa-8a3a-410b-99e4-caad959f637f",
            "18e84382-60ec-44f5-a838-a36dd115361e",
            "d8965401-21ea-4d8c-8480-cac8ed522004"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "04b3b744-3678-4300-8672-2c220873c7be",
          "title": "PUT",
          "fullFile": "D:\\PGADemoAPI\\test\\Test1.js",
          "file": "\\test\\Test1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "/users/:id",
              "fullTitle": "PUT /users/:id",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data={\n    status :\"Active\",\n    name :`Aasu ${Math.floor(Math.random()*9999)}`,\n}\nrequest.put(`users/${userId}`)\n.set('Authorization',`Bearer ${Token}`)\n.send(data)\n.then((res)=>{\n    console.log(res.body);\n})",
              "err": {},
              "uuid": "606c3cbf-46ce-4336-8bf6-e980d2cbdd85",
              "parentUUID": "04b3b744-3678-4300-8672-2c220873c7be",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "606c3cbf-46ce-4336-8bf6-e980d2cbdd85"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1fc8058d-99f5-4b39-820c-8f3d603f5792",
          "title": "DELETE",
          "fullFile": "D:\\PGADemoAPI\\test\\Test1.js",
          "file": "\\test\\Test1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "/users/:id",
              "fullTitle": "DELETE /users/:id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "request.delete(`users/${userId}`)\n.set('Authorization',`Bearer ${Token}`)\n.then(res=>{\n    expect(res.body.data).to.be.eq(null)\n})",
              "err": {},
              "uuid": "e786ef95-02b5-420e-b39c-b2d85c485a68",
              "parentUUID": "1fc8058d-99f5-4b39-820c-8f3d603f5792",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e786ef95-02b5-420e-b39c-b2d85c485a68"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6ef1d4b3-35a1-4cf7-b27a-34b8533b198a",
          "title": "Negative Tests",
          "fullFile": "D:\\PGADemoAPI\\test\\Test2.js",
          "file": "\\test\\Test2.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "401 Authentication Failed",
              "fullTitle": "Negative Tests 401 Authentication Failed",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = {\n    email: `test-${Math.floor(Math.random() * 9999)}@mail.com`,\n    // name :faker.name.fristName,\n    name: 'aay',\n    gender: 'female',\n    status: 'active',\n};\nrequest.post('users')\n    // .set('Authorization',`Bearer ${Token}`)\n    .send(data)\n    .then((res) => {\n        console.log(res.body);\n        expect(res.body.code).to.eq(401);\n        expect(res.body.data.message).to.eq('Authentication Failed');\n    })",
              "err": {},
              "uuid": "478dc45a-d5b0-4f90-8eb2-2c59bf485e00",
              "parentUUID": "6ef1d4b3-35a1-4cf7-b27a-34b8533b198a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "422 validation Failed",
              "fullTitle": "Negative Tests 422 validation Failed",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const data = {\n    email: `test-${Math.floor(Math.random() * 9999)}@mail.com`,\n    // email: faker.name.fristName;\n    name: 'Test1',\n    gender: 'female',\n    status: 'active',\n};\nconst postRes = request.post('users')\n    .set('Authorization', `Bearer ${Token}`)\n    .send(data)\n    .then((res) => {\n        console.log(res.body);\n        expect(res.body.code).to.eq(422);\n        expect(res.body.data.message).to.eq(\"can't be blank\");\n        expect(res.body.field).to.eq(body);\n    })",
              "err": {},
              "uuid": "7d664935-1777-4c59-8af1-b001599a2ad2",
              "parentUUID": "6ef1d4b3-35a1-4cf7-b27a-34b8533b198a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "478dc45a-d5b0-4f90-8eb2-2c59bf485e00",
            "7d664935-1777-4c59-8af1-b001599a2ad2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}